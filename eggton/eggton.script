-- gravity pulling the player down in pixel units/sË†2
local gravity = -10
local jump_speed = 400

local anim_jump, anim_idle, anim_move, anim_fall = hash("jump"), hash("idle"), hash("move"), hash("fall")

local function play_animation(self, anim)
	if self.current_animation ~= anim then
		self.current_animation = anim
		msg.post("#sprite", "play_animation", { id = anim } )
	end
end

local function update_animation(self)

	if self.dir.x ~= 0 then
		sprite.set_hflip("#sprite", self.dir.x ~= 1 )
	end
	
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x ~= 0 then
			play_animation(self, anim_move)
		else 
			play_animation(self, anim_idle)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		elseif self.velocity.y < 0 then
		 play_animation(self, anim_fall)
		end	
	end
end	

function init(self)
	-- this tells the engine to send input to on_input() in this script
	msg.post(".", "acquire_input_focus")
	
	-- this tells the enging to get the camera focus
	msg.post("/camera#camera", "acquire_camera_focus")
	
	-- save the starting position
	self.position = go.get_position()

	-- get the direction of the object
	self.dir = vmath.vector3(0,0,0)
	
	-- setting which animation to show first
	self.current_animation = anim_idle
	
	-- keep track of movement vector and if there is ground contact
	self.velocity = vmath.vector3(0, 0, 0)
	self.ground_contact = false
	
end

function final(self)
	-- Return input focus when the object is deleted
	msg.post(".", "release_input_focus")
end


function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)
	horizontal_movement_speed = vmath.vector3(150,0,0) * self.dir.x
	
	if self.ground_contact then
		self.velocity = self.velocity + horizontal_movement_speed
	else
		-- Apply gravity if there's no ground contact
		self.velocity = self.velocity + gravity + horizontal_movement_speed
	end

	-- apply velocity to the player character
	go.set_position(go.get_position() + self.velocity * dt)

	update_animation(self)
	
	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.dir.x = 0
	self.velocity.x = 0
end

local function handle_ground_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

function on_input(self, action_id, action)
	--jump, left and right movement
	if action_id == hash("jump") or action_id == hash("touch") then
		if action.pressed then 
			jump(self)
		end	
	end
	
	if action_id == hash("left") then
		self.dir.x = -1
		elseif action_id == hash("right") then
			self.dir.x = 1
	end
end

function jump(self)
	if self.ground_contact then
		self.velocity.y = self.velocity.y + jump_speed
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- check if we received a contact point message. One message for each contact point
		if message.group == hash("ground") then
			handle_ground_contact(self, message.normal, message.distance)
		end
	end
end